import streamlit as st
import pandas as pd
from io import BytesIO
from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment, Font

# Fonction de traitement pour le fichier Excel
def process_excel(file):
    try:
        # Lire le fichier Excel sans header
        xls = pd.read_excel(file, header=None)
                
        # Trouver l'index de la ligne d'en-t√™te
        header_index = next(
            (idx for idx, row in xls.iterrows() if all(col in row.values for col in ['Code', 'Nom', 'Pr√©nom'])),
            None
        )
        
        if header_index is None:
            st.error("Les colonnes 'Code', 'Nom', 'Pr√©nom' sont introuvables dans le fichier.")
            return None, None
        
        # Red√©finir les en-t√™tes et supprimer les lignes pr√©c√©dentes
        xls.columns = xls.iloc[header_index]
        xls = xls.iloc[header_index + 1:].reset_index(drop=True)
        
        # V√©rification si le fichier est vide apr√®s nettoyage
        if xls.empty:
            st.error("Aucune donn√©e valide apr√®s le traitement des lignes.")
            return None, None
        
        # V√©rification des colonnes n√©cessaires (double v√©rification)
        required_columns = ['Nom', 'Pr√©nom', 'Code']
        missing = [col for col in required_columns if col not in xls.columns]
        if missing:
            st.error(f"Colonnes manquantes apr√®s traitement : {', '.join(missing)}")
            return None, None
        
        # Nettoyage des donn√©es
        liste = xls.dropna(subset=['Nom', 'Pr√©nom', 'Code'])
        liste['Name'] = liste['Code'].astype(str) + ' ' + liste['Nom'] + ' ' + liste['Pr√©nom']
        liste = liste[['Code', 'Name']].drop_duplicates()
        return xls, liste
    
    except Exception as e:
        st.error(f"Erreur lors du traitement du fichier Excel : {str(e)}")
        st.info("Assurez-vous que le fichier est bien format√© et contient les colonnes requises.")
        return None, None

# Fonction de traitement pour le fichier CSV
def process_csv(excel_file, csv_file):
    try:
        xls, liste = process_excel(excel_file) 
        
        csv = pd.read_csv(csv_file, delimiter=';', encoding='utf-8')

        # Initialiser un DataFrame pour les anomalies
        anomalies = pd.DataFrame()

        # 1. Filtrer les lignes avec 'NONE' ou valeurs vides
        csv = csv[['A:Code', 'Code', 'Nom', 'Note']]
        none_mask = (csv['A:Code'] == 'NONE') 
        anomalies = pd.concat([anomalies, csv[none_mask]])
        csv_clean = csv[~none_mask].copy()
        
        # V√©rifier si le fichier nettoy√© est vide
        if csv_clean.empty:
            st.error("Aucune donn√©e valide apr√®s le nettoyage !")
            return None, None, None
    
        # Fusionner les donn√©es sur la colonne 'Code'
        df_merged = pd.merge(xls, csv_clean[['Code', 'Note']], on='Code', how='left')
        if 'Note_x' in df_merged.columns and 'Note_y' in df_merged.columns:
            df_merged.rename(columns={'Note_y': 'Note'}, inplace=True)
            df_merged.drop(columns=['Note_x'], inplace=True)
        return csv_clean, df_merged, anomalies
    
    except Exception as e:
        st.error(f"Erreur lors du traitement du fichier Excel : {str(e)}")
        st.info("Assurez-vous que le fichier est bien format√© et contient les colonnes requises.")
        return None, None, None

# Fonction pour g√©n√©rer un fichier Excel valide avec un en-t√™te personnalis√© "Medkour_DLGE15_2025"
def to_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        # √âcrire le DataFrame √† partir de la ligne 3 (index 2) pour laisser la place √† l'en-t√™te personnalis√©
        df.to_excel(writer, index=False, sheet_name='Sheet1', startrow=2)
        workbook = writer.book
        worksheet = writer.sheets['Sheet1']
        
        # D√©terminer le nombre de colonnes du DataFrame
        num_cols = df.shape[1]
        last_col = get_column_letter(num_cols)
    
    output.seek(0)  # Repositionner le curseur au d√©but du buffer
    return output.getvalue()

# ----------------- Interface utilisateur -----------------

st.title("Traitements de fichiers Excel et CSV pour AMC")

# Onglets pour s√©parer les sections
tab1, tab2 = st.tabs(["Liste des √©tudiants", "Traitement des notes"])

with tab1:
    st.header("Pr√©paration de la liste des √©tudiants")
    st.info(
        """
        - T√©l√©charger le fichier Excel de l'administration. 
        - Les en-t√™tes 'Nom', 'Pr√©nom' et 'Code' seront d√©tect√©s.
        - Les lignes avant les en-t√™tes seront automatiquement supprim√©es.
        - La liste des √©tudiants √† fournir √† AMC sera pr√©par√©e au format Excel avec un en-t√™te personnalis√©.
        """
    )
    
    uploaded_excel_file = st.file_uploader(
        "T√©l√©charger le fichier Excel de l'administration", 
        type="xlsx", 
        key="excel_uploader"
    )
    
    if uploaded_excel_file is not None:
        with st.spinner("Traitement automatique du fichier Excel en cours..."):
            xls, liste = process_excel(uploaded_excel_file)
            
            if xls is not None:
                st.success(f"Lecture du fichier Excel r√©ussie ! {len(xls)} √©tudiants trouv√©s.")  
                st.write("Aper√ßu de la base de donn√©es des √©tudiants avant traitement automatique :")
                st.write(xls.head(10))              
                st.write("Aper√ßu de la liste des √©tudiants √† fournir √† AMC:")
                st.write(liste.head(10))
                st.success(f"La liste contient {len(xls)} √©tudiants.")

                # G√©n√©rer le fichier Excel avec en-t√™te personnalis√©
                excel_data = to_excel(liste)
                st.download_button(
                    label="üì• T√©l√©charger la liste des √©tudiants au format Excel",
                    data=excel_data,
                    file_name="liste_etudiants.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

                # G√©n√©rer le fichier CSV
                csv_data = liste.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="üì• T√©l√©charger la liste des √©tudiants au format CSV",
                    data=csv_data,
                    file_name="liste_etudiants.csv",
                    mime="text/csv"
                )

with tab2:
    st.header("Traitement des notes")
    st.info(
        """
        - T√©l√©charger le fichier Excel de l'administration. 
        - T√©l√©charger le fichier CSV des notes calcul√©es par AMC.
        - Les notes seront automatiquement associ√©es aux √©tudiants.
        - Le nombre d'√©tudiants mal identifi√©s sera indiqu√©.
        """
    )

    uploaded_excel_file2 = st.file_uploader(
        "T√©l√©charger le fichier Excel de l'administration", 
        type="xlsx", 
        key="excel_uploader2"
    )

    uploaded_csv_file = st.file_uploader(
        "T√©l√©charger le fichier CSV des notes calcul√©es par AMC", 
        type="csv", 
        key="csv_uploader"
    )

    if uploaded_excel_file2 is not None:
        with st.spinner("Traitement automatique du fichier Excel en cours..."):
            xls, liste = process_excel(uploaded_excel_file2)

    if uploaded_csv_file is not None and uploaded_excel_file2 is not None:
        with st.spinner("Int√©gration des notes aux √©tudiants..."):
            csv_clean, df_merged, anomalies = process_csv(uploaded_excel_file2, uploaded_csv_file)

            st.write("Aper√ßu de la base de donn√©es des √©tudiants :")
            st.write(xls.head(10))   
            
            st.write("Aper√ßu du fichier des notes :")
            st.write(csv_clean.head(10))

            st.write("Aper√ßu de la base de donn√©es des √©tudiants aliment√©e par les notes :")
            st.write(df_merged.head(10))
                
            # Affichage des statistiques
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Effectif total", len(df_merged))
            with col2:
                st.metric("Pr√©sents", len(csv_clean))
            with col3:
                st.metric("Absents", len(df_merged) - len(csv_clean) - len(anomalies))
            with col4:
                st.metric("Mal identifi√©s", len(anomalies))
                
            # G√©n√©rer le fichier Excel final avec en-t√™te personnalis√©
            excel_data = to_excel(df_merged)
            st.download_button(
                label="üì• T√©l√©charger le fichier final des notes au format Excel",
                data=excel_data,
                file_name="etudiants_avec_notes.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
                
            if len(anomalies) > 0:   
                st.error(f"Attention! {len(anomalies)} √©tudiants ont √©t√© mal identifi√©s. V√©rifiez leurs copies.")